//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TriotechDbEntities : DbContext
    {
        public TriotechDbEntities()
            : base("name=TriotechDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BuyerRequest> BuyerRequests { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<OrderRequest> OrderRequests { get; set; }
        public virtual DbSet<OrderRequestAction> OrderRequestActions { get; set; }
        public virtual DbSet<OrderRequestStatu> OrderRequestStatus { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductRequest> ProductRequests { get; set; }
        public virtual DbSet<RequesterRequest> RequesterRequests { get; set; }
        public virtual DbSet<VendorRequest> VendorRequests { get; set; }
        public virtual DbSet<Visitor> Visitors { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<PhoneExt> PhoneExts { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<TermsOfService> TermsOfServices { get; set; }
        public virtual DbSet<OrderManagementRequest> OrderManagementRequests { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
    
        public virtual ObjectResult<FetchAdminOrderRequests_Result> FetchAdminOrderRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> actionID, Nullable<int> statusID, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAdminOrderRequests_Result>("FetchAdminOrderRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, actionIDParameter, statusIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchBuyerPendingOrderRequests_Result> FetchBuyerPendingOrderRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> actionID, Nullable<int> statusID, Nullable<int> buyerID, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var buyerIDParameter = buyerID.HasValue ?
                new ObjectParameter("BuyerID", buyerID) :
                new ObjectParameter("BuyerID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBuyerPendingOrderRequests_Result>("FetchBuyerPendingOrderRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, actionIDParameter, statusIDParameter, buyerIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchCategories_Result> FetchCategories(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCategories_Result>("FetchCategories", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchProducts_Result> FetchProducts(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> categoryID, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchProducts_Result>("FetchProducts", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, categoryIDParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchRequesterOrderRequests_Result> FetchRequesterOrderRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> actionID, Nullable<int> statusID, Nullable<int> requester, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var requesterParameter = requester.HasValue ?
                new ObjectParameter("Requester", requester) :
                new ObjectParameter("Requester", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchRequesterOrderRequests_Result>("FetchRequesterOrderRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, actionIDParameter, statusIDParameter, requesterParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchUser_Result> FetchUser(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> currentUserId, Nullable<int> roleID, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUser_Result>("FetchUser", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, currentUserIdParameter, roleIDParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchVendorOrderRequests_Result> FetchVendorOrderRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> actionID, Nullable<int> statusID, Nullable<int> vendorID, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVendorOrderRequests_Result>("FetchVendorOrderRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, actionIDParameter, statusIDParameter, vendorIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchVisitor_Result> FetchVisitor(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVisitor_Result>("FetchVisitor", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchActivityLog_Result> FetchActivityLog(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> recordStartDate, Nullable<System.DateTime> recordDateEndDate, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var recordStartDateParameter = recordStartDate.HasValue ?
                new ObjectParameter("RecordStartDate", recordStartDate) :
                new ObjectParameter("RecordStartDate", typeof(System.DateTime));
    
            var recordDateEndDateParameter = recordDateEndDate.HasValue ?
                new ObjectParameter("RecordDateEndDate", recordDateEndDate) :
                new ObjectParameter("RecordDateEndDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchActivityLog_Result>("FetchActivityLog", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, recordStartDateParameter, recordDateEndDateParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchBuyerBusinessRecord_Result> FetchBuyerBusinessRecord(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> statusID, Nullable<int> buyerID, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var buyerIDParameter = buyerID.HasValue ?
                new ObjectParameter("BuyerID", buyerID) :
                new ObjectParameter("BuyerID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBuyerBusinessRecord_Result>("FetchBuyerBusinessRecord", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, statusIDParameter, buyerIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchBuyerSentOrderRequests_Result> FetchBuyerSentOrderRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> statusID, Nullable<int> buyerID, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var buyerIDParameter = buyerID.HasValue ?
                new ObjectParameter("BuyerID", buyerID) :
                new ObjectParameter("BuyerID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBuyerSentOrderRequests_Result>("FetchBuyerSentOrderRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, statusIDParameter, buyerIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchDepartment_Result> FetchDepartment(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDepartment_Result>("FetchDepartment", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchLocation_Result> FetchLocation(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchLocation_Result>("FetchLocation", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchPhoneExt_Result> FetchPhoneExt(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPhoneExt_Result>("FetchPhoneExt", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchPriority_Result> FetchPriority(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPriority_Result>("FetchPriority", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchTermOfServices_Result> FetchTermOfServices(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string active)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTermOfServices_Result>("FetchTermOfServices", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, activeParameter);
        }
    
        public virtual ObjectResult<FetchManagementOrderManagementRequests_Result> FetchManagementOrderManagementRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string status, Nullable<int> managementID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var managementIDParameter = managementID.HasValue ?
                new ObjectParameter("ManagementID", managementID) :
                new ObjectParameter("ManagementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchManagementOrderManagementRequests_Result>("FetchManagementOrderManagementRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, statusParameter, managementIDParameter);
        }
    
        public virtual ObjectResult<FetchRequesterOrderManagementRequests_Result> FetchRequesterOrderManagementRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> requesterID, string search, string status)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var requesterIDParameter = requesterID.HasValue ?
                new ObjectParameter("RequesterID", requesterID) :
                new ObjectParameter("RequesterID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchRequesterOrderManagementRequests_Result>("FetchRequesterOrderManagementRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, requesterIDParameter, searchParameter, statusParameter);
        }
    
        public virtual ObjectResult<FetchSupervisorOrderManagementRequests_Result> FetchSupervisorOrderManagementRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<int> supervisorID, string search, string status)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("SupervisorID", supervisorID) :
                new ObjectParameter("SupervisorID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchSupervisorOrderManagementRequests_Result>("FetchSupervisorOrderManagementRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, supervisorIDParameter, searchParameter, statusParameter);
        }
    
        public virtual ObjectResult<FetchFinalAprovalOrderManagementRequests_Result> FetchFinalAprovalOrderManagementRequests(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string status, Nullable<int> finalApprovalID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finalApprovalIDParameter = finalApprovalID.HasValue ?
                new ObjectParameter("FinalApprovalID", finalApprovalID) :
                new ObjectParameter("FinalApprovalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFinalAprovalOrderManagementRequests_Result>("FetchFinalAprovalOrderManagementRequests", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, statusParameter, finalApprovalIDParameter);
        }
    
        public virtual int InsertCategoryByExcelFile(string categoryNumber, string categoryName, string categoryType, string description)
        {
            var categoryNumberParameter = categoryNumber != null ?
                new ObjectParameter("CategoryNumber", categoryNumber) :
                new ObjectParameter("CategoryNumber", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCategoryByExcelFile", categoryNumberParameter, categoryNameParameter, categoryTypeParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<FetchCompleteRequesterRequestList_Result> FetchCompleteRequesterRequestList(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string status)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompleteRequesterRequestList_Result>("FetchCompleteRequesterRequestList", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, statusParameter);
        }
    }
}
